ggplot2
install pakage("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
q
quit()
install.packages("swril")
install.packages("swril")
install.packages("swril")
quit()
install.packages("swril")
install.packages("swril")
quit()
add2 <- function ( x, y){}
add2 <- function ( x, y){ x +y}
View(add2)
View(add2)
add2(5,4)
View(add2)
add2 <- function{ x +y
x +y
add2 <- function(x,y){
add2 <- function(x,y){ x +y}
add2 <- function(x,y){ x +y}
q()
source('~/.active-rstudio-document')
y <- matrix(1+1e-10*rnorm(25),nc=5)
y
z <- 0.001*diag(1,5
)
z
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- c (2:20)
makeVector(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
cachemean(makeVector(x))
solve(y)
solve(z)
w <- matrix(rep(1,25),nc=5)
solve(w)
if (!solve(w)){ print("square") }
MA <- function(x){ {if (!is.matrix(x)){ if (ncol(x) == nrow(x)){ solve(x)} }}
}
MA(w)
MA(y)
MA <- function(x){ {if (is.matrix(x)){ if (ncol(x) == nrow(x)){ solve(x)} }}
}
MA(y)
MA(w)
MA(w)
q
quit
exit
q()
MA(w)
w
makeCacheMatrix <- function(x = matrix()) {
the_cache <- NULL ## iniciate null cache
the_matrix <- x ## conserve the matrix in case is the same
set_cache <- function (){  if ( is.matrix(x)){ ### check input is matrix
if ( ncol(x) == nrow(x)){ ## at least square in size
the_cache <- solve(x) ## inverse matrix to cache
}
}
}
y <-list(the_matrix =the_matrix,the_cache=the_cache)  ## do it a list
}
makeCacheMatrix(y)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
y <- x
m <- y$the_cache
if(!is.null(m)) {
if ( exists(y$the_cache) && y$the_matrix == x ){## if inverse calculated  and matrix unchanged
message("getting cached data") ## get the cache
return( m )
}
}
}
cacheSolve(makeCacheMatrix(y))
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length)
head iris
head(iris)
tapply(iris,iris$Species)
tapply(iris$Sepal.Length,iris$Species, mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
debug(ls)
head(mtcars)
q()
head(mtcars)
library(datasets)
data(mtcars)
head(mtcars)
cilinder <- tapply(mtcars$hp,mtcars$cyl,mean)
cilinder
209.21429-82.63636
##Assigment two
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
##This function creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
the_cache <- NULL ## iniciate null cache
set_cache <- function (y){  if ( is.matrix(x)){ ### check input is matrix
if ( ncol(x) == nrow(x)){ ## at least square in size
the_matrix <<- y ## preserve matrix in case is the same
the_cache <<- solve(x) ## inverse matrix to cache
}
}
}
matrix_value = function() x ## get a matrix value
my_list = list(matrix_value= matrix_value,the_cache= the_cache) ## make it a list
}
## Write a short comment describing this function
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$the_cache
if(!is.null(m)) { ## cache of the matrix
##
message("getting cached data") ## get the cache
return( m )
} else {
new_matrix <- x$matrix_value### create new matrix
f <- function(m) class(try(solve(m),silent=T))=="matrix" ## try to solv it
if ( f(new_matrix) == TRUE){ m <- solve(x)  } ## put it in the cache
}
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeCacheMatrix()
a$set_cache(matrix(1:4, 2, 2))
a
a$matrix_value(matrix(1:4, 2, 2))
b <- a$set(matrix(1:4, 2, 2))
b <- matrix(1:4, 2, 2)
b
cacheSolve(cachemean(b))
cacheSolve(makeCacheMatrix(b))
traceback()
setwd  (dir = "Dropbox/Docking/3D_numpy_array_cardinalities/")
ls
ls()
install.packages("3dplot")
install.packages("plot3D")
library("plot3D", lib.loc="~/R/x86_64-suse-linux-gnu-library/3.2")
dir()
coordenadas <- read.csv("table_unison_only_top5_no_mix.csv",header = T)
head (coordenadas)
df <- data.frame(coordenadas)
df
x<- [1:125];y <- [1:125]
x<- [1:125]
x<- c[1:125]
x <- 1:125
y <- 1:125
names(df)
df[order("coor_x","coor_y","coor_z"),]
df[,order("coor_x","coor_y","coor_z")]
head (df)
df[,order(df$coor_x,df$coor_y,df$coor_z)]
df[,order(df$coor_x)]
install.packages("dplyr")
df[order(df$coor_x),]
dfordered <- df[order(df$coor_x,df$coor_y,df$coor_z),]
dfordered
z_values <- dfordered$cases
plot3D::scatter3D(x,y,z_values)
install.packages("rgl")
library("rgl")
library(rgl)
install.packages("rgl",dependencies = TRUE)
library(rgl)
install.packages("rgl",dependencies = TRUE)
install.packages("rgl",dependencies = TRUE)
install.packages("rgl",dependencies = TRUE)
install.packages("rgl",dependencies = TRUE)
